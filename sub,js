addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request))
})

async function handleRequest(request) {

  function parseDom(arg) {
    var objE = document.createElement("div");
    objE.innerHTML = arg;
    // return objE.childNodes;
    return objE;
  };

  var Base64 = {
    // private property
    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
    // public method for encoding
    , encode: function (input) {
      var output = "";
      var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
      var i = 0;
      input = Base64._utf8_encode(input);
      while (i < input.length) {
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);
        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;
        if (isNaN(chr2)) {
          enc3 = enc4 = 64;
        }
        else if (isNaN(chr3)) {
          enc4 = 64;
        }
        output = output +
          this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
          this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
      } // Whend 
      return output;
    } // End Function encode 
    // public method for decoding
    , decode: function (input) {
      var output = "";
      var chr1, chr2, chr3;
      var enc1, enc2, enc3, enc4;
      var i = 0;
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      while (i < input.length) {
        enc1 = this._keyStr.indexOf(input.charAt(i++));
        enc2 = this._keyStr.indexOf(input.charAt(i++));
        enc3 = this._keyStr.indexOf(input.charAt(i++));
        enc4 = this._keyStr.indexOf(input.charAt(i++));
        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;
        output = output + String.fromCharCode(chr1);
        if (enc3 != 64) {
          output = output + String.fromCharCode(chr2);
        }
        if (enc4 != 64) {
          output = output + String.fromCharCode(chr3);
        }
      } // Whend 
      output = Base64._utf8_decode(output);
      return output;
    } // End Function decode 
    // private method for UTF-8 encoding
    , _utf8_encode: function (string) {
      var utftext = "";
      string = string.replace(/\r\n/g, "\n");
      for (var n = 0; n < string.length; n++) {
        var c = string.charCodeAt(n);
        if (c < 128) {
          utftext += String.fromCharCode(c);
        }
        else if ((c > 127) && (c < 2048)) {
          utftext += String.fromCharCode((c >> 6) | 192);
          utftext += String.fromCharCode((c & 63) | 128);
        }
        else {
          utftext += String.fromCharCode((c >> 12) | 224);
          utftext += String.fromCharCode(((c >> 6) & 63) | 128);
          utftext += String.fromCharCode((c & 63) | 128);
        }
      } // Next n 
      return utftext;
    } // End Function _utf8_encode 
    // private method for UTF-8 decoding
    , _utf8_decode: function (utftext) {
      var string = "";
      var i = 0;
      var c, c1, c2, c3;
      c = c1 = c2 = 0;
      while (i < utftext.length) {
        c = utftext.charCodeAt(i);
        if (c < 128) {
          string += String.fromCharCode(c);
          i++;
        }
        else if ((c > 191) && (c < 224)) {
          c2 = utftext.charCodeAt(i + 1);
          string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
          i += 2;
        }
        else {
          c2 = utftext.charCodeAt(i + 1);
          c3 = utftext.charCodeAt(i + 2);
          string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
          i += 3;
        }
      } // Whend 
      return string;
    } // End Function _utf8_decode 

  }
  function dateFormat(fmt, date) {
      let ret;
      const opt = {
          "Y+": date.getFullYear().toString(),        // 年
          "m+": (date.getMonth() + 1).toString(),     // 月
          "d+": date.getDate().toString(),            // 日
          "H+": date.getHours().toString(),           // 时
          "M+": date.getMinutes().toString(),         // 分
          "S+": date.getSeconds().toString()          // 秒
      };
      for (let k in opt) {
          ret = new RegExp("(" + k + ")").exec(fmt);
          if (ret) {
              fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, "0")))
          };
      };
      return fmt;
  }
  function getsub(str) {
    let domstr = "";
    domstr = str;
    trojan_list = [];
    var timezone = 8; 
    //目标时区时间，东八区
    var offset_GMT = new Date().getTimezoneOffset(); 
    // 本地时间和格林威治的时间差，单位为分钟
    var nowDate = new Date().getTime();
     // 本地时间距 1970 年 1 月 1 日午夜（GMT 时间）之间的毫秒数
    var targetDate = new Date(nowDate + offset_GMT * 60 * 1000 + timezone * 60 * 60 * 1000);
    date_str = dateFormat("mm-dd_HH:MM", targetDate);
    // var re = new RegExp("(?<=<b>)[^<]*(?=</b>)", "g");
    var re = new RegExp("(?<=<b>)(.*?)(?=</b>)", "g");
    for (i of domstr.split("\n")) {
      if (i.indexOf("trojan") >= 0) {
        trojan_list.push(i.match(re));
      }
    }
    trojan_list.forEach((trojan, i) => {
      trojan[1]=pwd[i].replace("\n","");
    });
    sub = "";
    for (trojan of trojan_list) {
      // sub += `trojan://${trojan[1]}@${trojan[0]}:${2202}#zkq8\n`
      sub += `trojan://${trojan[1]}@${trojan[0]}:${trojan[2]}#zkq8_${date_str}\n`
    }

    return Base64.encode(sub);
  }

  //请求头部、返回对象
  let reqHeaders = new Headers(request.headers),
    outBody, outStatus = 200, outStatusText = 'OK', outCt = null, outHeaders = new Headers({
      "Access-Control-Allow-Headers": "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With, Token, x-access-token"
    });
  pwd = [];
  for (p of ["1", "2"]) {
    try {
      // let url = "https://www.zkq8.com/v2ray2_link.txt"
      let url = "https://www.youhou8.com/pwd"
      //构建 fetch 参数
      let fp = {
        method: request.method,
        headers: {}
      }

      // 发起 fetch
      let fr = (await fetch(url+p, fp));
      pwd.push(await fr.text());

    } catch (err) {
      pwd.push("");
    }
  }
  try {
    // let url = "https://www.zkq8.com/v2ray2_link.txt"
    let url = "https://www.youhou8.com/v2ray"
    //构建 fetch 参数
    let fp = {
      method: request.method,
      headers: {}
    }

    // 发起 fetch
    let fr = (await fetch(url, fp));
    outCt = "text/html;charset=UTF-8"
    outStatus = fr.status;
    outStatusText = fr.statusText;
    outBody = fr.body;
    outBody = getsub(await fr.text());

  } catch (err) {
    outCt = "application/json";
    outBody = JSON.stringify({
      code: -1,
      msg: JSON.stringify(err.stack) || err
    });
  }

  //设置类型
  if (outCt && outCt != "") {
    outHeaders.set("content-type", outCt);
  }

  return new Response(outBody, {
    status: outStatus,
    statusText: outStatusText,
    headers: outHeaders
  })

}
